{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useSpeechRecognition","transcript","listening","finalTranscript","resetTranscript","browserSupportsSpeechRecognition","useState","answer","setAnswer","React","useEffect","speak","SpeechSynthesisUtterance","speechSynthesis","console","log","Mobile","onClick","recognition","window","speechRecognition","webkitSpeechRecognition","start","onresult","e","current","resultIndex","results","mobileRepeatBug","onend","onCopy","preventDefault","SpeechRecognition","stopListening","startListening","continuous","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOAuFeA,MAnFf,WACE,MAMIC,iCALFC,EADF,EACEA,WAEAC,GAHF,EAEEC,gBAFF,EAGED,WACAE,EAJF,EAIEA,gBACAC,EALF,EAKEA,iCAEF,EAA8CC,oBAAS,GAAvD,mBACA,GADA,UAC4BA,mBAAS,KAArC,mBAAOC,EAAP,KAAeC,EAAf,KAeA,GAbAC,IAAMC,WAAU,WACd,GAAIH,EAAO,CACT,IAAMI,EAAQ,IAAIC,yBAAyBL,GAC3CM,gBAAgBF,MAAMA,GACtBG,QAAQC,IAAIR,MAEd,CAACA,KAOEF,EAEH,OADAS,QAAQC,IAAR,+CACO,+EAET,SAASC,IAsBP,OAAO,wBAAQC,QApBf,WACE,IAAMC,EAAc,IAAKC,OAAOC,mBAAqBD,OAAOE,yBAC5DH,EAAYI,QACZJ,EAAYK,SAAW,SAACC,GACtB,IAAMC,EAAUD,EAAEE,YACdzB,EAAauB,EAAEG,QAAQF,GAAS,GAAGxB,WACvCO,EAAUP,GACV,IAAI2B,EAA8B,GAAXH,GAAgBxB,GAAcuB,EAAEG,QAAQ,GAAG,GAAG1B,WACjE2B,EAKFpB,EAAUoB,GAJU,mCAAf3B,GAAyC,oCAAfA,GACzBa,QAAQC,IAAId,GAKpBiB,EAAYW,MAAQ,WAClBf,QAAQC,IAAI,8CAIX,0GAIT,OACE,gCACE,mFACAb,EACE,2BACA,8BAEF,yBACE4B,OAAQ,SAACN,GAEP,OADAA,EAAEO,kBACK,GAETd,QACE,kBAAMf,EACJ8B,IAAkBC,iBAhD1B7B,SACA4B,IAAkBE,eAAe,CAAEC,YAAY,MAwC7C,kDAWAjC,EACE,iCACD,oCAED,4BAAID,IACJ,cAACe,EAAD,IACCT,MCtEQ6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ca71ed66.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport SpeechRecognition, {useSpeechRecognition} from 'react-speech-recognition';\n\nfunction App() {\n  const {\n    transcript,\n    finalTranscript,\n    listening,  \n    resetTranscript,\n    browserSupportsSpeechRecognition\n  } = useSpeechRecognition();\n  const [havePermissions, setHavePermissions] = useState(false)\n  const [answer, setAnswer] = useState('')\n\n  React.useEffect(() => {\n    if (answer){\n      const speak = new SpeechSynthesisUtterance(answer)\n      speechSynthesis.speak(speak)\n      console.log(answer);\n    }\n  },[answer])\n\n  const startListening = () => {\n    resetTranscript()\n    SpeechRecognition.startListening({ continuous: true });\n  }\n\n  if (!browserSupportsSpeechRecognition) {\n    console.log(`Browser doesn't support speech recognition.`);\n    return <span>Browser doesn't support speech recognition.</span>;\n  }\n  function Mobile(){\n    \n    function handleReco(){\n      const recognition = new (window.speechRecognition || window.webkitSpeechRecognition)();\n      recognition.start()\n      recognition.onresult = (e) => {\n        const current = e.resultIndex;\n        let transcript = e.results[current][0].transcript;\n        setAnswer(transcript)\n        let mobileRepeatBug = (current == 1 && transcript == e.results[0][0].transcript);\n        if(!mobileRepeatBug) {\n            if(transcript === 'בדיקה' || transcript === ' בדיקה') {\n                console.log(transcript);\n            }\n        } else {\n          setAnswer(mobileRepeatBug)\n        }\n        recognition.onend = () => {\n          console.log('Speech recognition service disconnected');\n        }\n      }\n    }\n    return <button onClick={handleReco}>\n      זיהוי קולי בטלפון\n    </button>\n  }\n  return (\n    <div>\n      <p>מיקרופון: {\n      listening \n      ? 'פעיל' \n      : 'כבוי'\n      }</p>\n      <button\n        onCopy={(e)=>{\n          e.preventDefault()\n          return false;\n        }}\n        onClick={\n          () => listening \n          ? SpeechRecognition.stopListening() \n          : startListening()\n        }\n      >לחיצה ל{\n      listening \n      ? 'דיבור' \n      :'כיבוי'\n      }</button>\n      <p>{transcript}</p>\n      <Mobile/>\n      {answer}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}