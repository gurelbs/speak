{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useSpeechRecognition","transcript","finalTranscript","listening","resetTranscript","browserSupportsSpeechRecognition","React","useEffect","speak","SpeechSynthesisUtterance","speechSynthesis","console","log","onCopy","e","preventDefault","onClick","SpeechRecognition","stopListening","startListening","continuous","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NA8CeA,MA1Cf,WACE,MAMIC,iCALFC,EADF,EACEA,WACAC,EAFF,EAEEA,gBACAC,EAHF,EAGEA,UACAC,EAJF,EAIEA,gBACAC,EALF,EAKEA,iCAgBF,OAbAC,IAAMC,WAAU,WACd,GAAIL,EAAgB,CAClB,IAAMM,EAAQ,IAAIC,yBAAyBP,GAC3CQ,gBAAgBF,MAAMA,GACtBG,QAAQC,IAAIV,MAEd,CAACA,IAOEG,EAMH,gCACE,mFAAcF,EAAY,2BAAS,8BACnC,yBACEU,OAAQ,SAACC,GAEP,OADAA,EAAEC,kBACK,GAETC,QAASb,EAAYc,IAAkBC,cAlBtB,WACrBd,IACAa,IAAkBE,eAAe,CAAEC,YAAY,KAW7C,mDAMUjB,EAAY,iCAAS,oCAC/B,4BAAIF,QAdNU,QAAQC,IAAR,+CACO,iFChBIS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7c663510.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport SpeechRecognition, {useSpeechRecognition} from 'react-speech-recognition';\n\nfunction App() {\n  const {\n    transcript,\n    finalTranscript,\n    listening,  \n    resetTranscript,\n    browserSupportsSpeechRecognition\n  } = useSpeechRecognition();\n\n  React.useEffect(() => {\n    if (finalTranscript){\n      const speak = new SpeechSynthesisUtterance(finalTranscript)\n      speechSynthesis.speak(speak)\n      console.log(finalTranscript);\n    }\n  },[finalTranscript])\n\n  const startListening = () => {\n    resetTranscript()\n    SpeechRecognition.startListening({ continuous: true });\n  }\n\n  if (!browserSupportsSpeechRecognition) {\n    console.log(`Browser doesn't support speech recognition.`);\n    return <span>Browser doesn't support speech recognition.</span>;\n  }\n\n  return (\n    <div>\n      <p>מיקרופון: {listening ? 'פעיל' : 'כבוי'}</p>\n      <button\n        onCopy={(e)=>{\n          e.preventDefault()\n          return false;\n        }}\n        onClick={listening ? SpeechRecognition.stopListening : startListening}\n      >לחיצה ל {listening ? 'דיבור' :'כיבוי'}</button>\n      <p>{transcript}</p>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}